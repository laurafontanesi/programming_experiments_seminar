<defaults>  
 /quitcommand = (Ctrl+'e') 
 /fontstyle=("Arial", 3%)
 /screencolor = (238, 238, 238)
 /txbgcolor = (238, 238, 238)
</defaults>

<parameters>
 /pictures_size = 40%
 /pictures_position_L = 35%
 /pictures_position_R = 65%
 /feedback_size = 8%
 /responsekey_left = 16
 /responsekeyleft_label = "q"
 /responsekey_right = 25
 /responsekeyright_label = "p"
 /feedbackduration = 2000
</parameters>

<values>
/accumulated_reward = 0
/accumulated_reward_money = 0
/correct_count = 0
/count = 0
/practice_block_count = 0
</values>

<expressions>
/transform_reward = round(values.accumulated_reward/100)/10
/accuracy = values.correct_count/values.count
</expressions>


### Define the stimuli:
<picture A>
 /items = ("wpa7_stimuli/A.png")
 /size = (parameters.pictures_size, parameters.pictures_size)
 /hposition = parameters.pictures_position_L
</picture>

<picture B>
 /items = ("wpa7_stimuli/B.png")
 /size = (parameters.pictures_size, parameters.pictures_size)
 /hposition = parameters.pictures_position_R
</picture>

<picture C>
 /items = ("wpa7_stimuli/C.png")
 /size = (parameters.pictures_size, parameters.pictures_size)
 /hposition = parameters.pictures_position_R
</picture>

<picture D>
 /items = ("wpa7_stimuli/D.png")
 /size = (parameters.pictures_size, parameters.pictures_size)
 /hposition = parameters.pictures_position_L
</picture>

<list rewardA>
 /items = (29, 36, 36, 32, 41, 38, 46, 39, 35, 29, 38, 33, 29, 35, 36, 30, 28, 44, 41, 32)
 /replace = false
 /select = random
 /resetinterval = 1
</list>

<list rewardB>
 /items = (35, 34, 49, 39, 48, 44, 38, 38, 39, 35, 45, 36, 42, 38, 42, 34, 43, 34, 33, 41)
 /replace = false
 /select = random
 /resetinterval = 1
</list>

<list rewardC>
 /items = (50, 57, 49, 49, 48, 47, 48, 42, 48, 46, 54, 50, 49, 50, 43, 49, 60, 50, 50, 51)
 /replace = false
 /select = random
 /resetinterval = 1
</list>

<list rewardD>
 /items = (58, 49, 61, 50, 56, 53, 56, 53, 48, 52, 50, 61, 53, 59, 49, 51, 56, 52, 51, 55)
 /replace = false
 /select = random
 /resetinterval = 1
</list>

<text feedbackA>
/items = ("<%list.rewardA.nextvalue%>")
/fontstyle=("Arial", parameters.feedback_size)
</text>

<text feedbackB>
/items = ("<%list.rewardB.nextvalue%>")
/fontstyle=("Arial", parameters.feedback_size)
</text>

<text feedbackC>
/items = ("<%list.rewardC.nextvalue%>")
/fontstyle=("Arial", parameters.feedback_size)
</text>

<text feedbackD>
/items = ("<%list.rewardD.nextvalue%>")
/fontstyle=("Arial", parameters.feedback_size)
</text>

<list left_or_right>
/items = (1, 2)
/select = random
/replace = true
</list>

### Define the trial elements
<trial choice_AB>
/ontrialbegin = [
	if (list.left_or_right.nextvalue == 1) {picture.A.hposition = parameters.pictures_position_L; picture.B.hposition = parameters.pictures_position_R} 
	else {picture.B.hposition = parameters.pictures_position_L; picture.A.hposition = parameters.pictures_position_R}
]
/stimulustimes = [0 = A, B]
/validresponse = (parameters.responsekey_left, parameters.responsekey_right)
/iscorrectresponse = [(list.left_or_right.currentvalue == 1 && response == parameters.responsekey_right) || (list.left_or_right.currentvalue == 2 && response == parameters.responsekey_left)]
/responsetrial = (parameters.responsekey_left, trial.feedback_AB)
/responsetrial = (parameters.responsekey_right, trial.feedback_AB)
/ ontrialend = [
	if (trial.choice_AB.correct) values.correct_count = values.correct_count + 1;
	values.count = values.count + 1
]
</trial>

<trial choice_AC>
/ontrialbegin = [
	if (list.left_or_right.nextvalue == 1) {picture.A.hposition = parameters.pictures_position_L; picture.C.hposition = parameters.pictures_position_R} 
	else {picture.C.hposition = parameters.pictures_position_L; picture.A.hposition = parameters.pictures_position_R}
]
/stimulustimes = [0 = A, C]
/validresponse = (parameters.responsekey_left, parameters.responsekey_right)
/iscorrectresponse = [(list.left_or_right.currentvalue == 1 && response == parameters.responsekey_right) || (list.left_or_right.currentvalue == 2 && response == parameters.responsekey_left)]
/responsetrial = (parameters.responsekey_left, trial.feedback_AC)
/responsetrial = (parameters.responsekey_right, trial.feedback_AC)
/ ontrialend = [
	if (trial.choice_AC.correct) values.correct_count = values.correct_count + 1;
	values.count = values.count + 1
]
</trial>

<trial choice_BD>
/ontrialbegin = [
	if (list.left_or_right.nextvalue == 1) {picture.B.hposition = parameters.pictures_position_L; picture.D.hposition = parameters.pictures_position_R} 
	else {picture.D.hposition = parameters.pictures_position_L; picture.B.hposition = parameters.pictures_position_R}
]
/stimulustimes = [0 = B, D]
/validresponse = (parameters.responsekey_left, parameters.responsekey_right)
/iscorrectresponse = [(list.left_or_right.currentvalue == 1 && response == parameters.responsekey_right) || (list.left_or_right.currentvalue == 2 && response == parameters.responsekey_left)]
/responsetrial = (parameters.responsekey_left, trial.feedback_BD)
/responsetrial = (parameters.responsekey_right, trial.feedback_BD)
/ ontrialend = [
	if (trial.choice_BD.correct) values.correct_count = values.correct_count + 1;
	values.count = values.count + 1
]
</trial>

<trial choice_CD>
/ontrialbegin = [
	if (list.left_or_right.nextvalue == 1) {picture.C.hposition = parameters.pictures_position_L; picture.D.hposition = parameters.pictures_position_R} 
	else {picture.D.hposition = parameters.pictures_position_L; picture.C.hposition = parameters.pictures_position_R}
]
/stimulustimes = [0 = C, D]
/validresponse = (parameters.responsekey_left, parameters.responsekey_right)
/iscorrectresponse = [(list.left_or_right.currentvalue == 1 && response == parameters.responsekey_right) || (list.left_or_right.currentvalue == 2 && response == parameters.responsekey_left)]
/responsetrial = (parameters.responsekey_left, trial.feedback_CD)
/responsetrial = (parameters.responsekey_right, trial.feedback_CD)
/ ontrialend = [
	if (trial.choice_CD.correct) values.correct_count = values.correct_count + 1;
	values.count = values.count + 1
]
</trial>

<trial feedback_AB>
/ontrialbegin = [
	if (list.left_or_right.currentvalue == 1) {text.feedbackA.hposition = parameters.pictures_position_L; text.feedbackB.hposition = parameters.pictures_position_R} 
	else {text.feedbackB.hposition = parameters.pictures_position_L; text.feedbackA.hposition = parameters.pictures_position_R}
]
/stimulustimes = [0 = feedbackA, feedbackB]
/trialduration = parameters.feedbackduration
/ontrialend = [
	if (trial.choice_AB.correct == 1)  {values.accumulated_reward = values.accumulated_reward + list.rewardB.currentvalue} 
	else {values.accumulated_reward = values.accumulated_reward + list.rewardA.currentvalue};
	values.accumulated_reward_money = expressions.transform_reward
]
</trial>

<trial feedback_AC>
/ontrialbegin = [
	if (list.left_or_right.currentvalue == 1) {text.feedbackA.hposition = parameters.pictures_position_L; text.feedbackC.hposition = parameters.pictures_position_R} 
	else {text.feedbackC.hposition = parameters.pictures_position_L; text.feedbackA.hposition = parameters.pictures_position_R}
]
/stimulustimes = [0 = feedbackA, feedbackC]
/trialduration = parameters.feedbackduration
/ontrialend = [
	if (trial.choice_AC.correct == 1)  {values.accumulated_reward = values.accumulated_reward + list.rewardC.currentvalue} 
	else {values.accumulated_reward = values.accumulated_reward + list.rewardA.currentvalue};
	values.accumulated_reward_money = expressions.transform_reward
]
</trial>

<trial feedback_BD>
/ontrialbegin = [
	if (list.left_or_right.currentvalue == 1) {text.feedbackB.hposition = parameters.pictures_position_L; text.feedbackD.hposition = parameters.pictures_position_R} 
	else {text.feedbackD.hposition = parameters.pictures_position_L; text.feedbackB.hposition = parameters.pictures_position_R}
]
/stimulustimes = [0 = feedbackB, feedbackD]
/trialduration = parameters.feedbackduration
/ontrialend = [
	if (trial.choice_BD.correct == 1)  {values.accumulated_reward = values.accumulated_reward + list.rewardD.currentvalue} 
	else {values.accumulated_reward = values.accumulated_reward + list.rewardB.currentvalue};
	values.accumulated_reward_money = expressions.transform_reward
]
</trial>

<trial feedback_CD>
/ontrialbegin = [
	if (list.left_or_right.currentvalue == 1) {text.feedbackC.hposition = parameters.pictures_position_L; text.feedbackD.hposition = parameters.pictures_position_R} 
	else {text.feedbackD.hposition = parameters.pictures_position_L; text.feedbackC.hposition = parameters.pictures_position_R}
]
/stimulustimes = [0 = feedbackC, feedbackD]
/trialduration = parameters.feedbackduration
/ontrialend = [
	if (trial.choice_CD.correct == 1)  {values.accumulated_reward = values.accumulated_reward + list.rewardD.currentvalue} 
	else {values.accumulated_reward = values.accumulated_reward + list.rewardC.currentvalue};
	values.accumulated_reward_money = expressions.transform_reward
]
</trial>


### Define block and experiment
<block practiceblock>
 /preinstructions = (page.start_practice)
  /onblockbegin = [
	values.correct_count = 0;
	values.count = 0;
	values.practice_block_count = values.practice_block_count + 1
]
 /trials = [1-20=noreplacenorepeat(choice_AB, choice_AC, choice_BD, choice_CD)]
 /branch = [if (expressions.accuracy > .6) block.choiceblock else {if (values.practice_block_count < 2) block.practiceblock}]
</block>

<block choiceblock>
 /preinstructions = (page.start_test)
  /onblockbegin = [
	values.accumulated_reward = 0
]
 /trials = [1-40=noreplacenorepeat(choice_AB, choice_AC, choice_BD, choice_CD)]
 /postinstructions = (page.final_message)
</block>

<expt>
 /blocks = [1=practiceblock]
</expt>

### Instruction pages
<page start_practice>
In this task, you will be asked to repeatedly choose between 2 out of 4 total options. Some options are better then others, meaning that they yield higher rewards on average. 
Your job is to choose the best option in each trial, since you can accumulate such rewards across the trials and receive a proportional monetary bonus at the end.

^^ This is a practise block, meaning that what you choose here will not influence your monetary bonus at the end.

^^ However, you have to reach a minimum of accuracy in this block in order to proceed.

^^ Press "q" to choose the left option, and "p" to choose the right option.
</page>

<page start_test>
Congratulations!
^^ You finished the practice block. Take a small break before continuing with the main task.

^^ **NOTE:** your reward points will start accumulating now.

^^ Remember, press "q" to choose the left option, and "p" to choose the right option.
</page>

<page final_message>
Congratulations!

^^ You finished the experiment.

^^ Based on your performance, you accumulated <%values.accumulated_reward%> points, corresponding to a bonus of <%values.accumulated_reward_money%> CHF.
</page>

### Data
<data>
/columns=[
build, computer.platform, date, time, subject, blocknum, blockcode, trialcode, latency, response, correct, stimulusitem, stimulusitem,
values.accumulated_reward, values.accumulated_reward_money, list.left_or_right.currentvalue, values.correct_count, values.count]
/separatefiles = true
/labels = true
</data>